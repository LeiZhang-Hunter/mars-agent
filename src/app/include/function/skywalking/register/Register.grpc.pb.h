// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: register/Register.proto
#ifndef GRPC_register_2fRegister_2eproto__INCLUDED
#define GRPC_register_2fRegister_2eproto__INCLUDED

#include "skywalking/register/Register.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

class Register final {
 public:
  static constexpr char const* service_full_name() {
    return "Register";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status doServiceRegister(::grpc::ClientContext* context, const ::Services& request, ::ServiceRegisterMapping* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServiceRegisterMapping>> AsyncdoServiceRegister(::grpc::ClientContext* context, const ::Services& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServiceRegisterMapping>>(AsyncdoServiceRegisterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServiceRegisterMapping>> PrepareAsyncdoServiceRegister(::grpc::ClientContext* context, const ::Services& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServiceRegisterMapping>>(PrepareAsyncdoServiceRegisterRaw(context, request, cq));
    }
    virtual ::grpc::Status doServiceInstanceRegister(::grpc::ClientContext* context, const ::ServiceInstances& request, ::ServiceInstanceRegisterMapping* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServiceInstanceRegisterMapping>> AsyncdoServiceInstanceRegister(::grpc::ClientContext* context, const ::ServiceInstances& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServiceInstanceRegisterMapping>>(AsyncdoServiceInstanceRegisterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServiceInstanceRegisterMapping>> PrepareAsyncdoServiceInstanceRegister(::grpc::ClientContext* context, const ::ServiceInstances& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServiceInstanceRegisterMapping>>(PrepareAsyncdoServiceInstanceRegisterRaw(context, request, cq));
    }
    virtual ::grpc::Status doEndpointRegister(::grpc::ClientContext* context, const ::Endpoints& request, ::EndpointMapping* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::EndpointMapping>> AsyncdoEndpointRegister(::grpc::ClientContext* context, const ::Endpoints& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::EndpointMapping>>(AsyncdoEndpointRegisterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::EndpointMapping>> PrepareAsyncdoEndpointRegister(::grpc::ClientContext* context, const ::Endpoints& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::EndpointMapping>>(PrepareAsyncdoEndpointRegisterRaw(context, request, cq));
    }
    virtual ::grpc::Status doNetworkAddressRegister(::grpc::ClientContext* context, const ::NetAddresses& request, ::NetAddressMapping* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NetAddressMapping>> AsyncdoNetworkAddressRegister(::grpc::ClientContext* context, const ::NetAddresses& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NetAddressMapping>>(AsyncdoNetworkAddressRegisterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NetAddressMapping>> PrepareAsyncdoNetworkAddressRegister(::grpc::ClientContext* context, const ::NetAddresses& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NetAddressMapping>>(PrepareAsyncdoNetworkAddressRegisterRaw(context, request, cq));
    }
    virtual ::grpc::Status doServiceAndNetworkAddressMappingRegister(::grpc::ClientContext* context, const ::ServiceAndNetworkAddressMappings& request, ::Commands* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Commands>> AsyncdoServiceAndNetworkAddressMappingRegister(::grpc::ClientContext* context, const ::ServiceAndNetworkAddressMappings& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Commands>>(AsyncdoServiceAndNetworkAddressMappingRegisterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Commands>> PrepareAsyncdoServiceAndNetworkAddressMappingRegister(::grpc::ClientContext* context, const ::ServiceAndNetworkAddressMappings& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Commands>>(PrepareAsyncdoServiceAndNetworkAddressMappingRegisterRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void doServiceRegister(::grpc::ClientContext* context, const ::Services* request, ::ServiceRegisterMapping* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void doServiceRegister(::grpc::ClientContext* context, const ::Services* request, ::ServiceRegisterMapping* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void doServiceRegister(::grpc::ClientContext* context, const ::Services* request, ::ServiceRegisterMapping* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void doServiceInstanceRegister(::grpc::ClientContext* context, const ::ServiceInstances* request, ::ServiceInstanceRegisterMapping* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void doServiceInstanceRegister(::grpc::ClientContext* context, const ::ServiceInstances* request, ::ServiceInstanceRegisterMapping* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void doServiceInstanceRegister(::grpc::ClientContext* context, const ::ServiceInstances* request, ::ServiceInstanceRegisterMapping* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void doEndpointRegister(::grpc::ClientContext* context, const ::Endpoints* request, ::EndpointMapping* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void doEndpointRegister(::grpc::ClientContext* context, const ::Endpoints* request, ::EndpointMapping* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void doEndpointRegister(::grpc::ClientContext* context, const ::Endpoints* request, ::EndpointMapping* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void doNetworkAddressRegister(::grpc::ClientContext* context, const ::NetAddresses* request, ::NetAddressMapping* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void doNetworkAddressRegister(::grpc::ClientContext* context, const ::NetAddresses* request, ::NetAddressMapping* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void doNetworkAddressRegister(::grpc::ClientContext* context, const ::NetAddresses* request, ::NetAddressMapping* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void doServiceAndNetworkAddressMappingRegister(::grpc::ClientContext* context, const ::ServiceAndNetworkAddressMappings* request, ::Commands* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void doServiceAndNetworkAddressMappingRegister(::grpc::ClientContext* context, const ::ServiceAndNetworkAddressMappings* request, ::Commands* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void doServiceAndNetworkAddressMappingRegister(::grpc::ClientContext* context, const ::ServiceAndNetworkAddressMappings* request, ::Commands* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ServiceRegisterMapping>* AsyncdoServiceRegisterRaw(::grpc::ClientContext* context, const ::Services& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ServiceRegisterMapping>* PrepareAsyncdoServiceRegisterRaw(::grpc::ClientContext* context, const ::Services& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ServiceInstanceRegisterMapping>* AsyncdoServiceInstanceRegisterRaw(::grpc::ClientContext* context, const ::ServiceInstances& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ServiceInstanceRegisterMapping>* PrepareAsyncdoServiceInstanceRegisterRaw(::grpc::ClientContext* context, const ::ServiceInstances& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::EndpointMapping>* AsyncdoEndpointRegisterRaw(::grpc::ClientContext* context, const ::Endpoints& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::EndpointMapping>* PrepareAsyncdoEndpointRegisterRaw(::grpc::ClientContext* context, const ::Endpoints& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::NetAddressMapping>* AsyncdoNetworkAddressRegisterRaw(::grpc::ClientContext* context, const ::NetAddresses& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::NetAddressMapping>* PrepareAsyncdoNetworkAddressRegisterRaw(::grpc::ClientContext* context, const ::NetAddresses& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Commands>* AsyncdoServiceAndNetworkAddressMappingRegisterRaw(::grpc::ClientContext* context, const ::ServiceAndNetworkAddressMappings& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Commands>* PrepareAsyncdoServiceAndNetworkAddressMappingRegisterRaw(::grpc::ClientContext* context, const ::ServiceAndNetworkAddressMappings& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status doServiceRegister(::grpc::ClientContext* context, const ::Services& request, ::ServiceRegisterMapping* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServiceRegisterMapping>> AsyncdoServiceRegister(::grpc::ClientContext* context, const ::Services& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServiceRegisterMapping>>(AsyncdoServiceRegisterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServiceRegisterMapping>> PrepareAsyncdoServiceRegister(::grpc::ClientContext* context, const ::Services& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServiceRegisterMapping>>(PrepareAsyncdoServiceRegisterRaw(context, request, cq));
    }
    ::grpc::Status doServiceInstanceRegister(::grpc::ClientContext* context, const ::ServiceInstances& request, ::ServiceInstanceRegisterMapping* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServiceInstanceRegisterMapping>> AsyncdoServiceInstanceRegister(::grpc::ClientContext* context, const ::ServiceInstances& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServiceInstanceRegisterMapping>>(AsyncdoServiceInstanceRegisterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServiceInstanceRegisterMapping>> PrepareAsyncdoServiceInstanceRegister(::grpc::ClientContext* context, const ::ServiceInstances& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServiceInstanceRegisterMapping>>(PrepareAsyncdoServiceInstanceRegisterRaw(context, request, cq));
    }
    ::grpc::Status doEndpointRegister(::grpc::ClientContext* context, const ::Endpoints& request, ::EndpointMapping* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::EndpointMapping>> AsyncdoEndpointRegister(::grpc::ClientContext* context, const ::Endpoints& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::EndpointMapping>>(AsyncdoEndpointRegisterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::EndpointMapping>> PrepareAsyncdoEndpointRegister(::grpc::ClientContext* context, const ::Endpoints& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::EndpointMapping>>(PrepareAsyncdoEndpointRegisterRaw(context, request, cq));
    }
    ::grpc::Status doNetworkAddressRegister(::grpc::ClientContext* context, const ::NetAddresses& request, ::NetAddressMapping* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NetAddressMapping>> AsyncdoNetworkAddressRegister(::grpc::ClientContext* context, const ::NetAddresses& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NetAddressMapping>>(AsyncdoNetworkAddressRegisterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NetAddressMapping>> PrepareAsyncdoNetworkAddressRegister(::grpc::ClientContext* context, const ::NetAddresses& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NetAddressMapping>>(PrepareAsyncdoNetworkAddressRegisterRaw(context, request, cq));
    }
    ::grpc::Status doServiceAndNetworkAddressMappingRegister(::grpc::ClientContext* context, const ::ServiceAndNetworkAddressMappings& request, ::Commands* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Commands>> AsyncdoServiceAndNetworkAddressMappingRegister(::grpc::ClientContext* context, const ::ServiceAndNetworkAddressMappings& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Commands>>(AsyncdoServiceAndNetworkAddressMappingRegisterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Commands>> PrepareAsyncdoServiceAndNetworkAddressMappingRegister(::grpc::ClientContext* context, const ::ServiceAndNetworkAddressMappings& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Commands>>(PrepareAsyncdoServiceAndNetworkAddressMappingRegisterRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void doServiceRegister(::grpc::ClientContext* context, const ::Services* request, ::ServiceRegisterMapping* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void doServiceRegister(::grpc::ClientContext* context, const ::Services* request, ::ServiceRegisterMapping* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void doServiceRegister(::grpc::ClientContext* context, const ::Services* request, ::ServiceRegisterMapping* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void doServiceInstanceRegister(::grpc::ClientContext* context, const ::ServiceInstances* request, ::ServiceInstanceRegisterMapping* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void doServiceInstanceRegister(::grpc::ClientContext* context, const ::ServiceInstances* request, ::ServiceInstanceRegisterMapping* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void doServiceInstanceRegister(::grpc::ClientContext* context, const ::ServiceInstances* request, ::ServiceInstanceRegisterMapping* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void doEndpointRegister(::grpc::ClientContext* context, const ::Endpoints* request, ::EndpointMapping* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void doEndpointRegister(::grpc::ClientContext* context, const ::Endpoints* request, ::EndpointMapping* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void doEndpointRegister(::grpc::ClientContext* context, const ::Endpoints* request, ::EndpointMapping* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void doNetworkAddressRegister(::grpc::ClientContext* context, const ::NetAddresses* request, ::NetAddressMapping* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void doNetworkAddressRegister(::grpc::ClientContext* context, const ::NetAddresses* request, ::NetAddressMapping* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void doNetworkAddressRegister(::grpc::ClientContext* context, const ::NetAddresses* request, ::NetAddressMapping* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void doServiceAndNetworkAddressMappingRegister(::grpc::ClientContext* context, const ::ServiceAndNetworkAddressMappings* request, ::Commands* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void doServiceAndNetworkAddressMappingRegister(::grpc::ClientContext* context, const ::ServiceAndNetworkAddressMappings* request, ::Commands* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void doServiceAndNetworkAddressMappingRegister(::grpc::ClientContext* context, const ::ServiceAndNetworkAddressMappings* request, ::Commands* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::ServiceRegisterMapping>* AsyncdoServiceRegisterRaw(::grpc::ClientContext* context, const ::Services& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ServiceRegisterMapping>* PrepareAsyncdoServiceRegisterRaw(::grpc::ClientContext* context, const ::Services& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ServiceInstanceRegisterMapping>* AsyncdoServiceInstanceRegisterRaw(::grpc::ClientContext* context, const ::ServiceInstances& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ServiceInstanceRegisterMapping>* PrepareAsyncdoServiceInstanceRegisterRaw(::grpc::ClientContext* context, const ::ServiceInstances& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::EndpointMapping>* AsyncdoEndpointRegisterRaw(::grpc::ClientContext* context, const ::Endpoints& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::EndpointMapping>* PrepareAsyncdoEndpointRegisterRaw(::grpc::ClientContext* context, const ::Endpoints& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::NetAddressMapping>* AsyncdoNetworkAddressRegisterRaw(::grpc::ClientContext* context, const ::NetAddresses& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::NetAddressMapping>* PrepareAsyncdoNetworkAddressRegisterRaw(::grpc::ClientContext* context, const ::NetAddresses& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Commands>* AsyncdoServiceAndNetworkAddressMappingRegisterRaw(::grpc::ClientContext* context, const ::ServiceAndNetworkAddressMappings& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Commands>* PrepareAsyncdoServiceAndNetworkAddressMappingRegisterRaw(::grpc::ClientContext* context, const ::ServiceAndNetworkAddressMappings& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_doServiceRegister_;
    const ::grpc::internal::RpcMethod rpcmethod_doServiceInstanceRegister_;
    const ::grpc::internal::RpcMethod rpcmethod_doEndpointRegister_;
    const ::grpc::internal::RpcMethod rpcmethod_doNetworkAddressRegister_;
    const ::grpc::internal::RpcMethod rpcmethod_doServiceAndNetworkAddressMappingRegister_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status doServiceRegister(::grpc::ServerContext* context, const ::Services* request, ::ServiceRegisterMapping* response);
    virtual ::grpc::Status doServiceInstanceRegister(::grpc::ServerContext* context, const ::ServiceInstances* request, ::ServiceInstanceRegisterMapping* response);
    virtual ::grpc::Status doEndpointRegister(::grpc::ServerContext* context, const ::Endpoints* request, ::EndpointMapping* response);
    virtual ::grpc::Status doNetworkAddressRegister(::grpc::ServerContext* context, const ::NetAddresses* request, ::NetAddressMapping* response);
    virtual ::grpc::Status doServiceAndNetworkAddressMappingRegister(::grpc::ServerContext* context, const ::ServiceAndNetworkAddressMappings* request, ::Commands* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_doServiceRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_doServiceRegister() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_doServiceRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status doServiceRegister(::grpc::ServerContext* /*context*/, const ::Services* /*request*/, ::ServiceRegisterMapping* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdoServiceRegister(::grpc::ServerContext* context, ::Services* request, ::grpc::ServerAsyncResponseWriter< ::ServiceRegisterMapping>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_doServiceInstanceRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_doServiceInstanceRegister() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_doServiceInstanceRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status doServiceInstanceRegister(::grpc::ServerContext* /*context*/, const ::ServiceInstances* /*request*/, ::ServiceInstanceRegisterMapping* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdoServiceInstanceRegister(::grpc::ServerContext* context, ::ServiceInstances* request, ::grpc::ServerAsyncResponseWriter< ::ServiceInstanceRegisterMapping>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_doEndpointRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_doEndpointRegister() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_doEndpointRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status doEndpointRegister(::grpc::ServerContext* /*context*/, const ::Endpoints* /*request*/, ::EndpointMapping* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdoEndpointRegister(::grpc::ServerContext* context, ::Endpoints* request, ::grpc::ServerAsyncResponseWriter< ::EndpointMapping>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_doNetworkAddressRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_doNetworkAddressRegister() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_doNetworkAddressRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status doNetworkAddressRegister(::grpc::ServerContext* /*context*/, const ::NetAddresses* /*request*/, ::NetAddressMapping* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdoNetworkAddressRegister(::grpc::ServerContext* context, ::NetAddresses* request, ::grpc::ServerAsyncResponseWriter< ::NetAddressMapping>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_doServiceAndNetworkAddressMappingRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_doServiceAndNetworkAddressMappingRegister() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_doServiceAndNetworkAddressMappingRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status doServiceAndNetworkAddressMappingRegister(::grpc::ServerContext* /*context*/, const ::ServiceAndNetworkAddressMappings* /*request*/, ::Commands* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdoServiceAndNetworkAddressMappingRegister(::grpc::ServerContext* context, ::ServiceAndNetworkAddressMappings* request, ::grpc::ServerAsyncResponseWriter< ::Commands>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_doServiceRegister<WithAsyncMethod_doServiceInstanceRegister<WithAsyncMethod_doEndpointRegister<WithAsyncMethod_doNetworkAddressRegister<WithAsyncMethod_doServiceAndNetworkAddressMappingRegister<Service > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_doServiceRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_doServiceRegister() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::Services, ::ServiceRegisterMapping>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Services* request, ::ServiceRegisterMapping* response) { return this->doServiceRegister(context, request, response); }));}
    void SetMessageAllocatorFor_doServiceRegister(
        ::grpc::experimental::MessageAllocator< ::Services, ::ServiceRegisterMapping>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Services, ::ServiceRegisterMapping>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_doServiceRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status doServiceRegister(::grpc::ServerContext* /*context*/, const ::Services* /*request*/, ::ServiceRegisterMapping* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* doServiceRegister(
      ::grpc::CallbackServerContext* /*context*/, const ::Services* /*request*/, ::ServiceRegisterMapping* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* doServiceRegister(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Services* /*request*/, ::ServiceRegisterMapping* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_doServiceInstanceRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_doServiceInstanceRegister() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::ServiceInstances, ::ServiceInstanceRegisterMapping>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::ServiceInstances* request, ::ServiceInstanceRegisterMapping* response) { return this->doServiceInstanceRegister(context, request, response); }));}
    void SetMessageAllocatorFor_doServiceInstanceRegister(
        ::grpc::experimental::MessageAllocator< ::ServiceInstances, ::ServiceInstanceRegisterMapping>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ServiceInstances, ::ServiceInstanceRegisterMapping>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_doServiceInstanceRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status doServiceInstanceRegister(::grpc::ServerContext* /*context*/, const ::ServiceInstances* /*request*/, ::ServiceInstanceRegisterMapping* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* doServiceInstanceRegister(
      ::grpc::CallbackServerContext* /*context*/, const ::ServiceInstances* /*request*/, ::ServiceInstanceRegisterMapping* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* doServiceInstanceRegister(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::ServiceInstances* /*request*/, ::ServiceInstanceRegisterMapping* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_doEndpointRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_doEndpointRegister() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::Endpoints, ::EndpointMapping>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Endpoints* request, ::EndpointMapping* response) { return this->doEndpointRegister(context, request, response); }));}
    void SetMessageAllocatorFor_doEndpointRegister(
        ::grpc::experimental::MessageAllocator< ::Endpoints, ::EndpointMapping>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Endpoints, ::EndpointMapping>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_doEndpointRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status doEndpointRegister(::grpc::ServerContext* /*context*/, const ::Endpoints* /*request*/, ::EndpointMapping* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* doEndpointRegister(
      ::grpc::CallbackServerContext* /*context*/, const ::Endpoints* /*request*/, ::EndpointMapping* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* doEndpointRegister(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Endpoints* /*request*/, ::EndpointMapping* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_doNetworkAddressRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_doNetworkAddressRegister() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::NetAddresses, ::NetAddressMapping>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::NetAddresses* request, ::NetAddressMapping* response) { return this->doNetworkAddressRegister(context, request, response); }));}
    void SetMessageAllocatorFor_doNetworkAddressRegister(
        ::grpc::experimental::MessageAllocator< ::NetAddresses, ::NetAddressMapping>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::NetAddresses, ::NetAddressMapping>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_doNetworkAddressRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status doNetworkAddressRegister(::grpc::ServerContext* /*context*/, const ::NetAddresses* /*request*/, ::NetAddressMapping* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* doNetworkAddressRegister(
      ::grpc::CallbackServerContext* /*context*/, const ::NetAddresses* /*request*/, ::NetAddressMapping* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* doNetworkAddressRegister(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::NetAddresses* /*request*/, ::NetAddressMapping* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_doServiceAndNetworkAddressMappingRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_doServiceAndNetworkAddressMappingRegister() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::ServiceAndNetworkAddressMappings, ::Commands>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::ServiceAndNetworkAddressMappings* request, ::Commands* response) { return this->doServiceAndNetworkAddressMappingRegister(context, request, response); }));}
    void SetMessageAllocatorFor_doServiceAndNetworkAddressMappingRegister(
        ::grpc::experimental::MessageAllocator< ::ServiceAndNetworkAddressMappings, ::Commands>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ServiceAndNetworkAddressMappings, ::Commands>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_doServiceAndNetworkAddressMappingRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status doServiceAndNetworkAddressMappingRegister(::grpc::ServerContext* /*context*/, const ::ServiceAndNetworkAddressMappings* /*request*/, ::Commands* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* doServiceAndNetworkAddressMappingRegister(
      ::grpc::CallbackServerContext* /*context*/, const ::ServiceAndNetworkAddressMappings* /*request*/, ::Commands* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* doServiceAndNetworkAddressMappingRegister(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::ServiceAndNetworkAddressMappings* /*request*/, ::Commands* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_doServiceRegister<ExperimentalWithCallbackMethod_doServiceInstanceRegister<ExperimentalWithCallbackMethod_doEndpointRegister<ExperimentalWithCallbackMethod_doNetworkAddressRegister<ExperimentalWithCallbackMethod_doServiceAndNetworkAddressMappingRegister<Service > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_doServiceRegister<ExperimentalWithCallbackMethod_doServiceInstanceRegister<ExperimentalWithCallbackMethod_doEndpointRegister<ExperimentalWithCallbackMethod_doNetworkAddressRegister<ExperimentalWithCallbackMethod_doServiceAndNetworkAddressMappingRegister<Service > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_doServiceRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_doServiceRegister() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_doServiceRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status doServiceRegister(::grpc::ServerContext* /*context*/, const ::Services* /*request*/, ::ServiceRegisterMapping* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_doServiceInstanceRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_doServiceInstanceRegister() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_doServiceInstanceRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status doServiceInstanceRegister(::grpc::ServerContext* /*context*/, const ::ServiceInstances* /*request*/, ::ServiceInstanceRegisterMapping* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_doEndpointRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_doEndpointRegister() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_doEndpointRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status doEndpointRegister(::grpc::ServerContext* /*context*/, const ::Endpoints* /*request*/, ::EndpointMapping* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_doNetworkAddressRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_doNetworkAddressRegister() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_doNetworkAddressRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status doNetworkAddressRegister(::grpc::ServerContext* /*context*/, const ::NetAddresses* /*request*/, ::NetAddressMapping* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_doServiceAndNetworkAddressMappingRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_doServiceAndNetworkAddressMappingRegister() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_doServiceAndNetworkAddressMappingRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status doServiceAndNetworkAddressMappingRegister(::grpc::ServerContext* /*context*/, const ::ServiceAndNetworkAddressMappings* /*request*/, ::Commands* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_doServiceRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_doServiceRegister() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_doServiceRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status doServiceRegister(::grpc::ServerContext* /*context*/, const ::Services* /*request*/, ::ServiceRegisterMapping* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdoServiceRegister(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_doServiceInstanceRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_doServiceInstanceRegister() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_doServiceInstanceRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status doServiceInstanceRegister(::grpc::ServerContext* /*context*/, const ::ServiceInstances* /*request*/, ::ServiceInstanceRegisterMapping* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdoServiceInstanceRegister(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_doEndpointRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_doEndpointRegister() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_doEndpointRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status doEndpointRegister(::grpc::ServerContext* /*context*/, const ::Endpoints* /*request*/, ::EndpointMapping* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdoEndpointRegister(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_doNetworkAddressRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_doNetworkAddressRegister() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_doNetworkAddressRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status doNetworkAddressRegister(::grpc::ServerContext* /*context*/, const ::NetAddresses* /*request*/, ::NetAddressMapping* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdoNetworkAddressRegister(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_doServiceAndNetworkAddressMappingRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_doServiceAndNetworkAddressMappingRegister() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_doServiceAndNetworkAddressMappingRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status doServiceAndNetworkAddressMappingRegister(::grpc::ServerContext* /*context*/, const ::ServiceAndNetworkAddressMappings* /*request*/, ::Commands* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdoServiceAndNetworkAddressMappingRegister(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_doServiceRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_doServiceRegister() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->doServiceRegister(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_doServiceRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status doServiceRegister(::grpc::ServerContext* /*context*/, const ::Services* /*request*/, ::ServiceRegisterMapping* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* doServiceRegister(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* doServiceRegister(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_doServiceInstanceRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_doServiceInstanceRegister() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->doServiceInstanceRegister(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_doServiceInstanceRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status doServiceInstanceRegister(::grpc::ServerContext* /*context*/, const ::ServiceInstances* /*request*/, ::ServiceInstanceRegisterMapping* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* doServiceInstanceRegister(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* doServiceInstanceRegister(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_doEndpointRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_doEndpointRegister() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->doEndpointRegister(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_doEndpointRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status doEndpointRegister(::grpc::ServerContext* /*context*/, const ::Endpoints* /*request*/, ::EndpointMapping* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* doEndpointRegister(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* doEndpointRegister(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_doNetworkAddressRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_doNetworkAddressRegister() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->doNetworkAddressRegister(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_doNetworkAddressRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status doNetworkAddressRegister(::grpc::ServerContext* /*context*/, const ::NetAddresses* /*request*/, ::NetAddressMapping* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* doNetworkAddressRegister(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* doNetworkAddressRegister(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_doServiceAndNetworkAddressMappingRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_doServiceAndNetworkAddressMappingRegister() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->doServiceAndNetworkAddressMappingRegister(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_doServiceAndNetworkAddressMappingRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status doServiceAndNetworkAddressMappingRegister(::grpc::ServerContext* /*context*/, const ::ServiceAndNetworkAddressMappings* /*request*/, ::Commands* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* doServiceAndNetworkAddressMappingRegister(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* doServiceAndNetworkAddressMappingRegister(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_doServiceRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_doServiceRegister() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Services, ::ServiceRegisterMapping>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Services, ::ServiceRegisterMapping>* streamer) {
                       return this->StreameddoServiceRegister(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_doServiceRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status doServiceRegister(::grpc::ServerContext* /*context*/, const ::Services* /*request*/, ::ServiceRegisterMapping* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreameddoServiceRegister(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Services,::ServiceRegisterMapping>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_doServiceInstanceRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_doServiceInstanceRegister() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ServiceInstances, ::ServiceInstanceRegisterMapping>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ServiceInstances, ::ServiceInstanceRegisterMapping>* streamer) {
                       return this->StreameddoServiceInstanceRegister(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_doServiceInstanceRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status doServiceInstanceRegister(::grpc::ServerContext* /*context*/, const ::ServiceInstances* /*request*/, ::ServiceInstanceRegisterMapping* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreameddoServiceInstanceRegister(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ServiceInstances,::ServiceInstanceRegisterMapping>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_doEndpointRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_doEndpointRegister() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Endpoints, ::EndpointMapping>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Endpoints, ::EndpointMapping>* streamer) {
                       return this->StreameddoEndpointRegister(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_doEndpointRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status doEndpointRegister(::grpc::ServerContext* /*context*/, const ::Endpoints* /*request*/, ::EndpointMapping* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreameddoEndpointRegister(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Endpoints,::EndpointMapping>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_doNetworkAddressRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_doNetworkAddressRegister() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::NetAddresses, ::NetAddressMapping>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::NetAddresses, ::NetAddressMapping>* streamer) {
                       return this->StreameddoNetworkAddressRegister(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_doNetworkAddressRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status doNetworkAddressRegister(::grpc::ServerContext* /*context*/, const ::NetAddresses* /*request*/, ::NetAddressMapping* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreameddoNetworkAddressRegister(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::NetAddresses,::NetAddressMapping>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_doServiceAndNetworkAddressMappingRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_doServiceAndNetworkAddressMappingRegister() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ServiceAndNetworkAddressMappings, ::Commands>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ServiceAndNetworkAddressMappings, ::Commands>* streamer) {
                       return this->StreameddoServiceAndNetworkAddressMappingRegister(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_doServiceAndNetworkAddressMappingRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status doServiceAndNetworkAddressMappingRegister(::grpc::ServerContext* /*context*/, const ::ServiceAndNetworkAddressMappings* /*request*/, ::Commands* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreameddoServiceAndNetworkAddressMappingRegister(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ServiceAndNetworkAddressMappings,::Commands>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_doServiceRegister<WithStreamedUnaryMethod_doServiceInstanceRegister<WithStreamedUnaryMethod_doEndpointRegister<WithStreamedUnaryMethod_doNetworkAddressRegister<WithStreamedUnaryMethod_doServiceAndNetworkAddressMappingRegister<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_doServiceRegister<WithStreamedUnaryMethod_doServiceInstanceRegister<WithStreamedUnaryMethod_doEndpointRegister<WithStreamedUnaryMethod_doNetworkAddressRegister<WithStreamedUnaryMethod_doServiceAndNetworkAddressMappingRegister<Service > > > > > StreamedService;
};


#endif  // GRPC_register_2fRegister_2eproto__INCLUDED
